doctype html
include ../includes/mixins

+page("Lecture 03 - Karma and Unit Testing")
  +lecture-title-page("Karma and Unit Testing", "Lecture 03")

  section
    h1 Lab 02
    h2 Solution

  section
    h1 Unit Testing

  section
    p
      | JavaScript is a dynamically typed language which comes with great power of expression,
      | but it also comes with almost no help from the compiler.

  section
    p For this reason any code written in JavaScript needs to come with a strong set of tests.

  section
    p The Angular team has built many features into Angular which makes testing your applications easy.

  section
    h3 There is no excuse for not testing

  section
    p You'll more than likely spend half of your time in labs testing your solutions.

  section
    h1 Karma

  section
    p
      | Karma is essentially a tool which spawns a web server that executes source code against test
      | code for each of the browsers connected.

  section
    p
      | The results for each test against each browser are examined and displayed via the command line
      | to the developer such that they can see which browsers and tests passed or failed.

  section
    p We'll use Karma with Grunt to integrate tests directly into our development workflow.

  section
    h1 Jasmine

  section
    p Jasmine is a behavior-driven development (BDD) framework for testing JavaScript code.

  section
    p Behavior driven development uses examples to illustrate behavior.

  section
    h2 Suites

  section
    p A test suite begins with a call to the global Jasmine function describe with two parameters: a string and a function.

  section
    p
      | The string is a name or title for a spec suite â€“ usually what is being tested and function is a block of code
      | that implements the suite.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {

      });

      </code>

  section
    h2 Specs

  section
    p A spec contains one or more expectations that test the state of the code.

  section
    p Specs are defined by calling the global Jasmine function 'it', which, like describe takes a string and a function.

  section
    p The string is the title of the spec and the function is the spec, or test.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {
        it('should behave in a certain way', function() {

        });
      });

      </code
  
  section
    p You can nest describe blocks to elaborate on what is being tested.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {
        it('should behave in a certain way', function() {

        });
        describe("component", function() {
          it('should do what we expect', function() {

          });
        });
      });

      </code>

    p Some feature should behave a certain way.
    p Some feature component should do what we expect.


  section
    h2 Expectations

  section
    p Expectations are built with the function 'expect' which takes a value, called the actual.

  section
    p It is chained with a Matcher function, which takes the expected value.

  section
    p Each matcher implements a boolean comparison between the actual value and the expected value.

  section
    p The matcher is responsible for reporting to Jasmine if the expectation is true or false.

  section
    pre.
      <code class="js" data-trim>
      describe("Some feature", function() {
        it('should behave in a certain way', function() {
          expect(true).to.equal(true);
          expect({}).to.be.ok; // Ok checks if the actual is defined
        });
      });

      </code>

  section
