doctype html
include ../includes/mixins

+page("Lecture 04 - Modules, Controllers, Resources, and Scope")
  +lecture-title-page("Modules, Controllers, Resources, and Scope", "Lecture 04")

  section
    h1 Lab 03
    h2 Solution

  section
    h1 Modules

  section
    p You can think of a module as a container for the different parts of your app â€“ controllers, services, filters, directives, etc.

  section
    p Most applications have a main method that instantiates and wires together the different parts of the application.

  section
    p Angular apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped.

  section
    p There are several advantages to this approach:
    ul
      li The declarative process is easier to understand.
      li You can package code as reusable modules.
      li The modules can be loaded in any order because modules delay execution.

  section
    p The AngularJS team recommends you break up modules in the following way
    ul
      li A module for each feature
      li A module for each reusable component (especially directives and filters)
      li An application level module which depends on the above modules and contains any initialization code

  section
    p A module is a collection of configuration and run blocks which get applied to the application during the bootstrap process.

  section
    p In its simplest form the module consist of collection of two kinds of blocks.

  section
    h2 Configuration Blocks

  section
    p
      | Configuration blocks get executed during the provider registrations and configuration phase.
      | Only providers and constants can be injected into configuration blocks. This is to prevent accidental instantiation
      | of services before they have been fully configured.

  section
    p Angular provides convience methods for module configuration that are equivalent to the config block.

  section
    h2 Run Blocks

  section
    p
      | Run blocks get executed after the injector is created and are used to kickstart the application.
      | Only instances and constants can be injected into run blocks. This is to prevent further system configuration
      | during application run time.

  section
    p Run blocks are the closest thing in Angular to the main method.

  section
    p A run block is the code which needs to run to kickstart the application.
    p It is executed after all of the service have been configured and the injector has been created.

  section
    p Example of run and config.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function(injectables) {

        });
        .run(function(injectables) {

        });

      </code>

  section
    h2 Dependencies

  section
    p Modules can list other modules as their dependencies.

  section
    p Depending on a module implies that required module needs to be loaded before the requiring module is loaded.

  section
    p Each module can only be loaded once, even if multiple other modules require it.

  section
    p Below is an example of how to specify a module dependency.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [
        'dependency1',
        'dependency2'
      ])
        .config(function() {
          //...
        });

      </code>

  section
    h1 Controllers

  section
    p In Angular, a controller is a JavaScript constructor function that is used to augment the Angular Scope.

  section
    p You can create controllers on a module.  The first argument is the controller name, and the second is the constructor function.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('AppController',
          function() {

          }
        );

      </code>

  section
    p You should use controllers to
    ul
      li Set up the initial state of the $scope object.
      li Add behavior to the $scope object.

  section
    p You should not use controllers to
    ul
      li Manipulate DOM.
      li Share code or state across controllers.
      li Manage the life-cycle of other components
      li Format input
      li Format output

  section
    p In general, a controller shouldn't try to do too much.

  section
    p It should contain only the business logic needed for a single view.

  section
    p When creating a controller you can inject the new scope as well as other dependencies.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('AppController',
          function($scope, $interval) {

          }
        );

      </code>

  section
    p You can associate Controllers with scope objects implicitly via the ngController directive.

  section
    p Controller
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('AppController',
          function($scope) {
            $scope.time = new Date();
          }
        );

      </code>

    p Template
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="AppController" &gt;
        &lt;p&gt;{{time}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section(id="example1", ng-controller="AppController")
    p Final result
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="AppController" &gt;
        &lt;p&gt;{{time}}&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    p Adding functionality to scope.
    pre.
      <code class="js" data-trim>
        angular.module('app.controllers', [])
          .controller('TimeController',
            function($scope, $interval) {
              // Set the $scope.time variable to now
              $scope.updateTime = function updateTime() {
                $scope.time = new Date();
              };

              // Run $scope.updateTime() every 20 ms
              $interval(function() {
                $scope.updateTime();
              }, 25);
            }
          );

      </code>

  section(id="example2", ng-controller="TimeController")
    h2 {{time | date:'h:mm:ss.sss a'}}

  section
    h2 Inheritance

  section
    p It is common to attach controllers at different levels of the DOM hierarchy.

  section
    p Since the ng-controller directive creates a new child scope, we get a hierarchy of scopes that inherit from each other.

  section
    p The $scope that each Controller receives will have access to properties and methods defined by controllers higher up the hierarchy.

  section
    p What would the value of property be for each controller?
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="ParentController" &gt;
        &lt;p&gt;{{property}}&lt;/p&gt;
        &lt;div ng-controller="ChildController" &gt;
          &lt;p&gt;{{property}}&lt;/p&gt;
          &lt;div ng-controller="GrandChildController" &gt;
            &lt;p&gt;{{property}}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('ParentController',function($scope) {
          $scope.property = 'one';
        });
        .controller('ChildController',function($scope) {

        });
        .controller('GrandChildController',function($scope) {
          $scope.property = 'two';
        });

      </code>

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="ParentController" &gt;
        &lt;p&gt;one&lt;/p&gt;
        &lt;div ng-controller="ChildController" &gt;
          &lt;p&gt;one&lt;/p&gt;
          &lt;div ng-controller="GrandChildController" &gt;
            &lt;p&gt;two&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

  script.
    angular.module('lecture04', [])
      .controller('AppController', [
        '$scope',
        function($scope) {
          $scope.time = new Date();
        }
      ])
      .controller('TimeController', [
        '$scope',
        '$interval',
        function($scope, $interval) {
          $scope.updateTime = function updateTime() {
            $scope.time = new Date();
          };

          $interval(function() {
            $scope.updateTime();
          }, 25);
        }
      ]);

    angular.bootstrap(document.getElementById("example1"), ['lecture04']);
    angular.bootstrap(document.getElementById("example2"), ['lecture04']);
