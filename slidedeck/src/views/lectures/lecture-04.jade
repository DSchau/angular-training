doctype html
include ../includes/mixins

+page("Lecture 04 - Modules, Controllers, Resources, and Scope")
  +lecture-title-page("Modules, Controllers, Resources, and Scope", "Lecture 04")

  section
    h1 Lab 03
    h2 Solution

  section
    h1 Modules
    h2 Continued

  section
    p A module is has a of configuration and run blocks which get applied to the application during the bootstrap process.

  section
    p In its simplest form, the module consists of two kinds of blocks.

  section
    h2 Configuration Blocks

  section
    p Configuration blocks get executed during the provider registrations and configuration phase.

  section
    p Only providers and constants can be injected into configuration blocks.

  section
    p This is to prevent accidental instantiation of services before they have been fully configured.

  section
    h2 Run Blocks

  section
    p Run blocks get executed after the injector is created and are used to kickstart the application.

  section
    p Only instances and constants can be injected into run blocks.

  section
    p This is to prevent further system configuration during application run time.

  section
    p A run block is the code which needs to run to kickstart the application.

  section
    p It is executed after all of the service have been configured and the injector has been created.

  section
    p Run blocks are the closest thing in Angular to the main method.

  section
    p Example of run and config.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function(injectables) {

        });
        .run(function(injectables) {

        });

      </code>

  section
    h1 Application Routing

  section
    p Everyone is familiar with typical web page development.  When you click a link, it takes you to a new page.

  section
    p When building single page applications, like ours, this presents a problem.

  section
    p The process of reloading a page adds significant overhead espcially considering we already have everything we need to display every page.

  section
    p This is where the Angular $route service comes into play.

  section
    p The $route service is used for deep-linking URLs to controllers and views (HTML partials).

  section
    p It watches $location.url() and tries to map the path to an existing route definition.

  section
    p When the location changes, the $route service will load the HTML partial for the page and then compile and link the associated controller to it.

  section
    p We use the $routeProvider in our modules configuration block to instruct the $route service which URL's are matched to which templates and controllers.

  section
    p Lets configure some routes.

  section
    p This configures the $route service so that when the browser URL is /projects, load the template and compile and link the project controller on it.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function($routeProvider) {
          $routeProvider
            .when('/projects', {
               templateUrl: 'assets/templates/app/projects/index.html',
               controller: 'ProjectCtrl'
            });
        });

      </code>

  section
    p We can add additional configurations by chaining 'when' statements.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function($routeProvider) {
          $routeProvider
            .when('/projects', {
               templateUrl: 'assets/templates/app/projects/index.html',
               controller: 'ProjectCtrl'
            })
            .when('/employees', {
               templateUrl: 'assets/templates/app/employees/index.html',
               controller: 'EmployeeCtrl'
            });
        });

      </code>

  section
    p What about when a user enters a URL that's not in the configuration?

  section
    p Simply add an 'otherwise' statement to the configuration change to redirect the user to a default page.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .config(function($routeProvider) {
          $routeProvider
            .when('/projects', {
               templateUrl: 'assets/templates/app/projects/index.html',
               controller: 'ProjectCtrl'
            })
            .otherwise({
               redirectTo: '/projects'
            });
        });

      </code>

  section
    p Now that we've configured the $route service, we need to give it direction on where to put our templates in the page DOM.

  section
    p For this, we'll use the ngView directive.
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ng-view&gt;&lt;/div&gt
      &lt;/body&gt;

      </code>

  section
    h1 Resources

  section
    p A resource is an abstract term for the data returned by some RESTful endpoint.

  section
    p Since REST has an established pattern, we can use that pattern to simplify how we send and receive data with our RESTful API.

  section
    p Angular provides the $resource service to help us with that.

  section
    p The $resource service is a factory which creates a resource object that lets you interact with RESTful server-side data sources.

  section
    p The returned resource object has action methods which provide high-level behaviors without the need to interact with the low level $http service.

  section
    p By default, the $resource class object is configured with the following methods.
    br
    pre.
      <code class="js" data-trim>
      {
        'get':    {method:'GET'},
        'save':   {method:'POST'},
        'query':  {method:'GET', isArray:true},
        'remove': {method:'DELETE'},
        'delete': {method:'DELETE'}
      }

      </code>

  section
    p Calling these methods invoke an $http with the specified http method, destination and parameters.

  section
    p When the data is returned from the server then the object is an instance of the resource class.

  section
    p The actions save, remove and delete are available on it as methods with the $ prefix.

  section
    p Let's create a resource.

  section
    pre.
      <code class="js" data-trim>
      angular.module('app', [])
        .controller(function($resource) {
          var Employee = $resource(
            '/employee/:employeeId',
            {employeeId:'@id'}
          );
        });

      </code>

  section
    p The first argument specifies the URL of the resource.  You can use parameters to substitute variables in those URL's.
    br
    pre.
      <code class="js" data-trim>
      var Employee = $resource('/employee/:employeeId');

      </code>

  section
    p The second argument specifies how $resource should substitute those URL variable with the options passed in.
    br
    pre.
      <code class="js" data-trim>
      var Employee = $resource(
        '/employee/:employeeId',
        {employeeId:'@id'}
      );

      </code>
    p Here, the 'id' property in the options object will be substituted in the place of :employeeId in the resource URL.

  section
    p It's important to note here that Employee is a resource class.  We will use the resource class to create new instances of the resource.

  section
    p Now that we've defined our resource, we can use the Employee resource class to get an instance of an employee
    br
    pre.
      <code class="js" data-trim>
      $scope.employee = Employee.get({id: 23});

      </code>
    p What will the HTTP request look like for this action?

  section
    p GET /employee/23

  section
    p It is important to realize that invoking a $resource object method immediately returns an empty reference.

  section
    p Once the data is returned from the server the existing reference is populated with the actual data.

  section
    p We can supply a callback function to be executed once the reference is populated with data.

  section
    p One we have a populated instance of the employee resource, we can change is and call action methods on it.
    br
    pre.
      <code class="js" data-trim>
      $scope.employee = Employee.get({id: 23}, function() {
        $scope.employee.name = 'Mike';
        $scope.employee.$save();
      });

      </code>
    p What will the HTTP request look like for $scope.employee.$save()?

  section
    p POST /employee/23

  section
    p
      | In Lab 4, we've wrapped the $resource service with an $api and $control service to even further simplify
      | how you will communicate with our RESTful API.
    

  //- section
  //-   h1 Inheritance
  //-
  //- section
  //-   p It is common to attach controllers at different levels of the DOM hierarchy.
  //-
  //- section
  //-   p Since the ng-controller directive creates a new child scope, we get a hierarchy of scopes that inherit from each other.
  //-
  //- section
  //-   p The $scope that each Controller receives will have access to properties and methods defined by controllers higher up the hierarchy.
  //-
  //- section
  //-   p What would the value of property be for each controller?
  //-   pre.
  //-     <code class="html" data-trim>
  //-     &lt;div ng-controller="ParentController" &gt;
  //-       &lt;p&gt;{{property}}&lt;/p&gt;
  //-       &lt;div ng-controller="ChildController" &gt;
  //-         &lt;p&gt;{{property}}&lt;/p&gt;
  //-         &lt;div ng-controller="GrandChildController" &gt;
  //-           &lt;p&gt;{{property}}&lt;/p&gt;
  //-         &lt;/div&gt;
  //-       &lt;/div&gt;
  //-     &lt;/div&gt;
  //-
  //-     </code>
  //-   pre.
  //-     <code class="js" data-trim>
  //-     angular.module('app.controllers', [])
  //-       .controller('ParentController',function($scope) {
  //-         $scope.property = 'one';
  //-       });
  //-       .controller('ChildController',function($scope) {
  //-
  //-       });
  //-       .controller('GrandChildController',function($scope) {
  //-         $scope.property = 'two';
  //-       });
  //-
  //-     </code>
  //-
  //- section
  //-   pre.
  //-     <code class="html" data-trim>
  //-     &lt;div ng-controller="ParentController" &gt;
  //-       &lt;p&gt;one&lt;/p&gt;
  //-       &lt;div ng-controller="ChildController" &gt;
  //-         &lt;p&gt;one&lt;/p&gt;
  //-         &lt;div ng-controller="GrandChildController" &gt;
  //-           &lt;p&gt;two&lt;/p&gt;
  //-         &lt;/div&gt;
  //-       &lt;/div&gt;
  //-     &lt;/div&gt;
