doctype html
include ../includes/mixins

+page("Lecture 05 - UI Router")
  +lecture-title-page("UI Router", "Lecture 05")

  section
    h1 Lab 04
    h2 Solution

  section
    h1 Controller
    h2 Interitance

  section
    p It's common to attach controllers at different levels of the DOM hierarchy.

  section
    p Since the ng-controller directive creates a new child scope, we get a hierarchy of scopes that inherit from each other.

  section
    p The $scope that each controller receives will have access to properties and methods defined by controllers higher up the hierarchy.

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="ParentController" &gt;
        &lt;p&gt;{{property}}&lt;/p&gt;
        &lt;div ng-controller="ChildController" &gt;
          &lt;p&gt;{{property}}&lt;/p&gt;
          &lt;div ng-controller="GrandChildController" &gt;
            &lt;p&gt;{{property}}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('ParentController',function($scope) {
          $scope.property = 'one';
        });
        .controller('ChildController',function($scope) {

        });
        .controller('GrandChildController',function($scope) {
          $scope.property = 'two';
        });

      </code>
    p What would the value of property be for each controller?

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="ParentController" &gt;
        &lt;p&gt;one&lt;/p&gt;
        &lt;div ng-controller="ChildController" &gt;
          &lt;p&gt;one&lt;/p&gt;
          &lt;div ng-controller="GrandChildController" &gt;
            &lt;p&gt;two&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p This behavior is very useful in applications with complex user interfaces.

  section
    p We can use parents scopes and controllers as a means to communicate between child scopes and controllers.

  section
    p Unfortunately the url routing service provided by Angular doesn't allow for this complex view design and controller inheritance.

  section
    p This is where the community, specifically the AngularUI team, has stepped in to provide a better solution.

  section
    h1 UI Router

  section
    p AngularUI Router is a routing framework for AngularJS, which allows you to organize the parts of your interface into a state machine.

  section
    p  Unlike the $route service in Angular core, which is organized around URL routes, UI-Router is organized around states.

  section
    p  These state may optionally have routes, as well as other behavior attached.

  section
    p States are bound to named, nested and parallel views, allowing you to powerfully manage your application's interface.

  section
    p Since the AngularUI Router is a module, we need to include it as a module dependency.

  section
    p Notice that the $stateProvider is configured within the module config block.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', ['ui.router'])
        .config(function($stateProvider) {
            $stateProvider
              .state('app', {
                template: '&lt;h1&gt;My App&lt;/h1&gt;'
              });
        });

      </code>

  section
    h2 State Manager

  section
    p The AngularUI Router $stateProvider works similar to Angular's router, but it focuses purely on state.

  section
    p A state corresponds to a "place" in the application in terms of the overall UI and navigation.

  section
    p A state describes (via the controller / template / view properties) what the UI looks like and does at that place.

  section
    p States often have things in common, and the primary way of factoring out these commonalities in this model is via the state hierarchy (parent/child states or nested states).

  section
    p A state in its simplest form can be added like this
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ui-view&gt;&lt;/div&gt;
      &lt;/body&gt;

      </code>
    pre.
      <code class="js" data-trim>
      .config(function($stateProvider) {
          $stateProvider
            .state('app', {
              template: '&lt;h1&gt;My App&lt;/h1&gt;'
            });
      });

      </code>

  section
    p When a state is activated, its templates are automatically inserted into the ui-view of its parent state's template.

  section
    p This is what the DOM will look like when the app state is active.
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ui-view&gt;
          &lt;h1&gt;My App&lt;/h1&gt;
        &lt;/div&gt;
      &lt;/body&gt;

      </code>

  section
    h3 Templates

  section
    p There are several methods for configuring a state's template.

  section
    p The simplest way to set your template is via the template config property.

  section
    p In our application, most of our templates will be fairly large so we'll use the templateUrl property.

  section
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          templateUrl: 'assets/app/index.html'
        });

      </code>

  section
    h3 Controllers

  section
    p You can assign a controller to your template for a particular state in several ways.

  section
    p In our application, we'll use the controller name and allow the DI service to inject that controller.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl'
        });

      </code>

  section
    h3 URLS

  section
    p Most states in our application will have a url associated with them.

  section
    p Here's how you set a basic url.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl'
        });

      </code>

  section
    p When the user accesses /app then the 'app' state would become active.

  section
    p Often, URLs have dynamic parts to them which are called parameters.

  section
    p Here's how you set a basic basic parameter in your URL.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app/:myParameter',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl'
        });

      </code>

  section
    p These parameters can be injected into the controller using the $stateParams service.
    br
    pre.
      <code class="js" data-trim>
      controller('AppCtrl',
        function($scope, $stateParams) {
          $scope.myParameter = $stateParams.myParameter;
        }
      );

      </code>

  section
    p There are other advanced configurations of URL parameters provided by AngularUI Router.

  section
    p These include
    ul
      li.
        <strong>Regex Parameters</strong> /projects/{projectId:[0-9]{1,8}}
      li.
        <strong>Query Parameters</strong> /projects?myParam1&myParam2

  section
    p We wont be using these in our project but, they are available if you ever need to use them.

  section
    h3 Custom Data

  section
    p You can also attach custom data to the $state object.

  section
    p The $state object can be injected, making it available to controllers and thus, templates.

  section
    p This can be very useful when defining properties like a page title.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl',
          data : {
            title : 'My Application'
          }
        });

      </code>

  section
    p The $state object is specific to the state that instanciated the controller.
    br
    pre.
      <code class="js" data-trim>
      controller('AppCtrl',
        function($scope, $state) {
          $scope.pageTitle = $state.data.title;
        }
      );

      </code>

    p You will need to take this into consideration if you share controllers between states.

  section
    h3 Resolve

  section
    p You can use resolve to provide your controller with content or data that is custom to the state.

  section
    p The resolve property is an optional map of dependencies which should be injected into the controller.

  section
    p If any of these dependencies are promises, they will be resolved and converted to a value before the controller is instantiated.

  section
    p This is ideal when we need to load data required to display the view.

  section
    p By placing API requests in the states resolve configuration, we can make sure we have the data required to render the view before the view is actually rendered.

  section
    p Notice that we can use DI in our resolve configurations.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl',
          resolve: {
            projects: function ($control) {
              return $control.get('projects');
            }
          }
        });

      </code>

    pre.
      <code class="js" data-trim>
      controller('AppCtrl',
        function($scope, $state, projects) {
          $scope.projects = projects;
        }
      );

      </code>

  section
    p If any of these promises are not resolved (rejected), then the state will not load.

  section
    p This behavior is particularly important when we need to verify that a user has permissions to activate/view a state.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl',
          resolve: {
            authenticatedUser: authProvider.requireAuthenticatedUser
          }
        });

      </code>

  section
    h2 Nested States

  section
    p With AngularUI Router, states can be nested within each other.

  section
    p There are several ways to nest states.

  section
    p For our project, we'll be using the dot notation method to signify nested states.

  section
    p In this example, the projects state is nested within the app state.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {})
          .state('app.projects', {});

      </code>

  section
    h3 Registering States

  section
    p You can register states in any order across multiple modules.

  section
    p You can also register child states before the parent state exists.

  section
    p The $stateProvider will queue each state up as it's configured.

  section
    p Once a parent state is registered, the children of that state will then be registered.

  section
    p This will allow us to scope our state configurations to the modules that use them.

  section
    pre.
      <code class="js" data-trim>
      angular.module('app', ['ui.router', 'app.projects', '...'])
        .config(function($stateProvider) {
            $stateProvider
              .state('app');
        });

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.projects', [])
        .config(function($stateProvider) {
            $stateProvider
              .state('app.projects');
        });

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.employees', [])
        .config(function($stateProvider) {
            $stateProvider
              .state('app.employees');
        });

      </code>

  section
    h3 State Inheritance

  section
    p When the application is in a particular state all of its ancestor states are implicitly active as well.

  section
    p First, lest consider how this property affects $scope.

  section
    p Given the app state and AppCtrl
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', ['app.projects'])
        .config(function($stateProvider) {
            $stateProvider
              .state('app');
        });

      </code>

    pre.
      <code class="js" data-trim>
      controller(function($scope) {
        $scope.myProperty = "My Property";
      });

      </code>

  section
    p And the the app.projects state and ProjectsCtrl
    br
    pre.
      <code class="js" data-trim>
      angular.module('app.projects', [])
        .config(function($stateProvider) {
            $stateProvider
              .state('app');
        });

      </code>

    pre.
      <code class="js" data-trim>
      controller(function($scope) {
        $scope.myProperty = "My Property";
      });

      </code>

  section


  section


  section


  section


  section


  section


  section


  section


  section


  section


  section


  section


  section


  section
