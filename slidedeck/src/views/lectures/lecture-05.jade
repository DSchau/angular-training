doctype html
include ../includes/mixins

+page("Lecture 05 - UI Router")
  +lecture-title-page("UI Router", "Lecture 05")

  section
    h1 Lab Four
    h2 Solution

  section
    h1 Controller
    h2 Inheritance

  section
    p It's common to attach controllers at different levels of the DOM hierarchy.

  section
    p Since the
      strong  ng-controller
      |  directive creates a new child scope, we get a hierarchy of scopes that inherit from each other.

  section
    p The
      strong  $scope
      |  that each controller receives will have access to properties and methods defined by controllers higher up the hierarchy.

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="ParentController" &gt;
        &lt;p&gt;{{property}}&lt;/p&gt;
        &lt;div ng-controller="ChildController" &gt;
          &lt;p&gt;{{property}}&lt;/p&gt;
          &lt;div ng-controller="GrandChildController" &gt;
            &lt;p&gt;{{property}}&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.controllers', [])
        .controller('ParentController',function($scope) {
          $scope.property = 'one';
        });
        .controller('ChildController',function($scope) {

        });
        .controller('GrandChildController',function($scope) {
          $scope.property = 'two';
        });

      </code>
    p What would the value of property be for each controller?

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-controller="ParentController" &gt;
        &lt;p&gt;one&lt;/p&gt;
        &lt;div ng-controller="ChildController" &gt;
          &lt;p&gt;one&lt;/p&gt;
          &lt;div ng-controller="GrandChildController" &gt;
            &lt;p&gt;two&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p This behavior is very useful in applications with complex user interfaces.

  section
    p We can use parent scopes and controllers as a means to communicate between child scopes and controllers.

  section
    p Unfortunately, the URL routing service provided by Angular doesn't allow for this complex view design and controller inheritance.

  section
    p This is where the community, specifically the AngularUI team, has stepped in to provide a better solution.

  section
    h1 UI Router

  section
    p
      strong  AngularUI Router
      |  is a routing framework for AngularJS, which allows you to organize the parts of your interface into a state machine.

  section
    p Unlike the
      strong  $route
      |  service in Angular core, which is organized around URL routes, UI Router is organized around
      strong  states
      | .

  section
    p These states may optionally have routes, as well as other behavior attached to them.

  section
    p States are bound to named, nested and parallel views, allowing you to powerfully manage your application's interface.

  section
    p Since the AngularUI Router is a module, we need to include it as a module dependency.

  section
    p Notice that the
      strong  $stateProvider
      |  is configured within the module config block.
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', ['ui.router'])
        .config(function($stateProvider) {
            $stateProvider
              .state('app', {
                template: '&lt;h1&gt;My App&lt;/h1&gt;'
              });
        });

      </code>

  section
    h2 State Manager

  section
    p The AngularUI Router
      strong  $stateProvider
      |  works similar to Angular's router, but it focuses purely on state.

  section
    p A state corresponds to a "place" in the application in terms of the overall UI and navigation.

  section
    p A state describes (via the controller / template / view properties) what the UI looks like and does at that place.

  section
    p States often have things in common, and the primary way of factoring out these commonalities in this model is via the state hierarchy (parent/child states or nested states).

  section
    p A state in its simplest form can be added like this:
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ui-view&gt;&lt;/div&gt;
      &lt;/body&gt;

      </code>
    pre.
      <code class="js" data-trim>
      .config(function($stateProvider) {
          $stateProvider
            .state('app', {
              template: '&lt;h1&gt;My App&lt;/h1&gt;'
            });
      });

      </code>

  section
    p When a state is activated, its templates are automatically inserted into the
      strong  ui-view
      |  of its parent state's template.

  section
    p This is what the DOM will look like when the app state is active.
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ui-view&gt;
          &lt;h1&gt;My App&lt;/h1&gt;
        &lt;/div&gt;
      &lt;/body&gt;

      </code>

  section
    h3 Templates

  section
    p There are several methods for configuring a state's template.

  section
    p The simplest way to set your template is via the template config property.

  section
    p In our application, most of our templates will be fairly large so we'll use the
      strong  templateUrl
      |  property.

  section
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          templateUrl: 'assets/app/index.html'
        });

      </code>

  section
    h3 Controllers

  section
    p You can assign a controller to your template for a particular state in several ways.

  section
    p In our application, we'll use the controller name and allow the DI service to inject that controller.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl'
        });

      </code>

  section
    h3 URLS

  section
    p Most states in our application will have a URL associated with them.

  section
    p Here's how you set a basic URL.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl'
        });

      </code>

  section
    p When the user accesses
      strong  /app
      |, then the 'app' state would become active.

  section
    p Often, URLs have dynamic parts to them which are called
      strong  parameters.

  section
    p Here's how you set a basic parameter in your URL.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app/:myParameter',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl'
        });

      </code>

  section
    p These parameters can be injected into the controller using the
      strong  $stateParams
      |  service.
    br
    pre.
      <code class="js" data-trim>
      controller('AppCtrl',
        function($scope, $stateParams) {
          $scope.myParameter = $stateParams.myParameter;
        }
      );

      </code>

  section
    p There are other advanced configurations of URL parameters provided by AngularUI Router.

  section
    p These include
    ul
      li.
        <strong>Regex Parameters</strong> /projects/{projectId:[0-9]{1,8}}
      li.
        <strong>Query Parameters</strong> /projects?myParam1&myParam2

  section
    p We won't be using these in our project, but they are available if you ever need to use them.

  section
    h3 Custom Data

  section
    p You can also attach custom data to the
      strong  $state
      |  object.

  section
    p The
      strong  $state
      |  object can be injected, making it available to controllers and thus, templates.

  section
    p This can be very useful when defining properties like a page title.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl',
          data : {
            title : 'My Application'
          }
        });

      </code>

  section
    p The
      strong  $state
      |  object is specific to the state that instantiated the controller.
    br
    pre.
      <code class="js" data-trim>
      controller('AppCtrl',
        function($scope, $state) {
          $scope.pageTitle = $state.data.title;
        }
      );

      </code>

    p You will need to take this into consideration if you share controllers between states.

  section
    h3 Resolve

  section
    p You can use
      strong  resolve
      |  to provide your controller with content or data that is custom to the state.

  section
    p The
      strong  resolve
      |  property is an optional map of dependencies which should be injected into the controller.

  section
    p If any of these dependencies are promises, they will be resolved and converted to a value before the controller is instantiated.

  section
    p This is ideal when we need to load data required to display the view.

  section
    p By placing API requests in the state's
      strong  resolve
      |  configuration, we can make sure we have the data required to render the view before the view is actually rendered.

  section
    p Notice that we can use DI in our resolve configurations.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl',
          resolve: {
            projects: function (data) {
              return data.list('projects');
            }
          }
        });

      </code>

    pre.
      <code class="js" data-trim>
      controller('AppCtrl',
        function($scope, $state, projects) {
          $scope.projects = projects;
        }
      );

      </code>

  section
    p If any of these promises are not resolved (rejected), then the state will not load.

  section
    p This behavior is particularly important when we need to verify that a user has permissions to activate/view a state.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          url: '/app',
          templateUrl: 'assets/app/index.html',
          controller: 'AppCtrl',
          resolve: {
            authenticatedUser: authProvider.requireAuthenticatedUser
          }
        });

      </code>

    p We'll address this when we implement security in lab 7.

  section
    h2 Nested States

  section
    p With AngularUI Router, states can be nested within each other.

  section
    p There are several ways to nest states.

  section
    p For our project, we'll be using the
    strong  dot notation
    |  method to signify nested states.

  section
    p In this example, the projects state is nested within the app state.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {})
          .state('app.projects', {});

      </code>

  section
    h3 Registering States

  section
    p You can register states in any order across multiple modules.

  section
    p You can also register child states before the parent state exists.

  section
    p The
      strong  $stateProvider
      |  will queue each state up as it is configured.

  section
    p Once a parent state is registered, the children of that state will then be registered.

  section
    p This will allow us to scope our state configurations to the modules that use them.

  section
    pre.
      <code class="js" data-trim>
      angular.module('app', ['ui.router', 'app.projects', '...'])
        .config(function($stateProvider) {
            $stateProvider
              .state('app');
        });

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.projects', [])
        .config(function($stateProvider) {
            $stateProvider
              .state('app.projects');
        });

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('app.employees', [])
        .config(function($stateProvider) {
            $stateProvider
              .state('app.employees');
        });

      </code>

  section
    h3 State Inheritance

  section
    p When the application is in a particular state, all of its ancestor states are implicitly active as well.

  section
    p Let's go over what child states inherit from their parent state.

  section
    h4 Scope

  section
    p Given the app state and AppCtrl
    br
    pre.
      <code class="js" data-trim>
      angular.module('app', ['app.projects'])
        .config(function($stateProvider) {
            $stateProvider
              .state('app', {
                controller: 'AppCtrl'
              });
        });

      </code>

    pre.
      <code class="js" data-trim>
      controller('AppCtrl', function($scope) {
        $scope.myProperty = "My Property";
      });

      </code>

  section
    p Then, given the
    strong  app.projects
    |  state and ProjectsCtrl
    br
    pre.
      <code class="js" data-trim>
      angular.module('app.projects', [])
        .config(function($stateProvider) {
            $stateProvider
              .state('app.projects', {
                controller: 'ProjectCtrl'
              });
        });

      </code>

    pre.
      <code class="js" data-trim>
      controller('ProjectCtrl', function($scope) {
        console.log($scope.myProperty);
      });

      </code>

  section
    p "My Property" will be printed out to the console when the
      strong  app.projects
      |  state is active because it is inherited from the parent state.

  section
    p Where does scope inheritance happen?  In the state configuration or the view?

  section
    p Inheritance of scope properties has nothing to do with the nesting of your states.

  section
    p Inheritance of scope properties has everything to do with the nesting of your views (templates).

  section
    h4 Views

  section
    p Child states will load their templates into their parent's template element with the
      strong  ui-view
      |  directive.

  section
    p For these views, what will the resulting DOM look like when the
      strong  app.projects
      |  state is active?
    br
    pre.
      <code class="html" data-trim>
      &lt;!-- index.html --&gt;
      &lt;body&gt;
        &lt;div ui-view&gt;&lt;/div&gt;
      &lt;/body&gt;

      </code>

    pre.
      <code class="html" data-trim>
      &lt;!-- app state template --&gt;
      &lt;h1&gt;My Application&lt;/h1&gt;
      &lt;div ui-view&gt;&lt;/div&gt;

      </code>

    pre.
      <code class="html" data-trim>
      &lt;!-- app.projects state template --&gt;
      &lt;h2&gt;Projects&lt;/h2&gt;

      </code>

  section
    pre.
      <code class="html" data-trim>
      &lt;!-- index.html --&gt;
      &lt;body&gt;
        &lt;div ui-view&gt;
          &lt;!-- app state template --&gt;
          &lt;h1&gt;My Application&lt;/h1&gt;
          &lt;div ui-view&gt;
            &lt;!-- app.projects state template --&gt;
            &lt;h2&gt;Projects&lt;/h2&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/body&gt;

      </code>

  section
    h4 Resolved Dependencies

  section
    p Child states inherit a parent state's resolved dependencies.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app.projects', {
          controller: 'ProjectsCtrl',
          resolve: {
            projects: function (data) {
              return data.get('projects');
            }
          }
        })
          .state('app.projects.detail', {
            controller: 'ProjectsDetailCtrl',
          });

      </code>

    pre.
      <code class="js" data-trim>
      controller('ProjectsDetailCtrl', function(projects) {
        // Here we can inject projects because it was resolved
        // in the parent state.
      });

      </code>

  section
    h4 Data Properties

  section
    p Child states inherit a parent state's data properties.

  section
    p What will the value of
      strong  $scope.title
      |  and
      strong  $scope.section
      |  be in ProjectDetailCtrl?
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app.projects', {
          controller: 'ProjectsCtrl',
          data: {
            title: 'Projects',
            section: 'Projects'
          }
        })
          .state('app.projects.detail', {
            controller: 'ProjectsDetailCtrl',
            data: {
              title: 'Project Detail',
            }
          });

      </code>

    pre.
      <code class="js" data-trim>
      controller('ProjectsDetailCtrl', function($scope, $state) {
        $scope.title = $state.current.data.title;
        $scope.section = $state.current.data.section;
      });

      </code>

  section
    p
      strong  $scope.title
      |  would be "Project Detail"
    p
      strong  $scope.section
      |  would be "Projects"
    p Even though data is inherited, we can still override parts of that data in child states.

  section
   h4 URLs

  section
    p Child states don't inherit their parent state's URL.

  section
    p Rather, a child state's URL is appended to the parent state's URL unless otherwise defined.

  section
    p Which state would be loaded when the user accesses
      strong  /projects/12
      | ?
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app.projects', {
          url: '/projects'
          controller: 'ProjectsCtrl'
        })
          .state('app.projects.detail', {
            url: '/:projectId',
            controller: 'ProjectsDetailCtrl'
          });

      </code>

  section
    p The
      strong  app.projects.detail
      |  state.
    p That being said, there is one special thing to note with the
      strong  $stateParams
      |  service

  section
    p In state controllers, the
      strong $stateParams
      |  object will only contain the params that were registered with that state.

  section
    p Controllers and templates are not inherited in nested states.

  section
    h2 Abstract States

  section
    p An
      strong  abstract state
      |  can have child states, but can not get activated itself.

  section
    p An abstract state is activated implicitly when one of its descendants is activated.

  section
    p Some examples of how you might use an abstract state
    ul
      li To prepend a URL to all child state URLs.
      li To insert a template with its own
        strong  ui-view(s)
        |  that its child states will populate.
      li To provide resolved dependencies via resolve for use by child states.
      li To provide inherited custom data via data for use by child states.

  section
    p One important thing to note is that abstract states still need their own
      strong='  <div ui-view></div>'
      |  for their children to plug into.

  section
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app.projects', {
          abstract: true,
          url: '/projects',
          controller: 'ProjectsCtrl',
          template: '&lt;div ui-view&gt;&lt;/div&gt;'
        })
          .state('app.projects.list', {
            url: '/list',
            controller: 'ProjectsListCtrl'
          })
          .state('app.projects.detail', {
            url: '/detail',
            controller: 'ProjectsDetailCtrl'
          });

      </code>

  section
    h2 Multiple Named Views

  section
    p You can name your views so that you can have more than one
      strong  ui-view
      |  per template.

  section
    p When setting multiple views, you need to use the
      strong  views
      |  property on state.

  section
    p The
      strong  views
      |  property is an object that allows you to specify state properties for the view.

  section
    p You can specify most of the same configurations on the named views as you can in the state.
    br
    pre.
      <code class="js" data-trim>
      $stateProvider
        .state('app', {
          views : {
            'navbar' : {
              controller: 'NavCtrl',
              templateUrl: 'assets/templates/app/navbar.html'
            },
            'content' : {
              controller: 'AppCtrl',
              templateUrl: 'assets/templates/app/index.html'
            }
          }
        })

      </code>

  section
    p Now lets take a look at how we would layout the
      strong  ui-view
      |  directives.

  section
    p Where would child views of
      strong  app
      |  be rendered?
    br
    pre.
      <code class="html" data-trim>
      &lt;body&gt;
        &lt;div ui-view="navbar"&gt;&lt;/div&gt;
        &lt;div ui-view="content"&gt;&lt;/div&gt;
      &lt;/body&gt;

      </code>

  section
    p Child views will be rendered in the first unnamed
      strong  ui-view
      |  encountered in the app template or view templates.

  section
    p With great power comes great responsibility.

  section
    p Using this functionality without purpose can greatly complicate your application instead of simplifying it.

  section
    h2 $state service

  section
    p The
      strong  $state
      |  service is responsible for representing states as well as transitioning between them.

  section
    p It also provides interfaces to ask for current state or even states you're coming from.

  section
    h3 Methods
    ul(style="font-weight: bold;")
      li get(stateOrName)
      li go(to, params, options)
      li href(stateOrName, params, options)
      li includes(stateOrName, params)
      li is(stateName, params)
      li reload()
      li transitionTo(to, toParams, options)

  section
    h3 Properties
    ul
      li
        strong  params:
        |  A param object, e.g. {sectionId: section.id)}, that you'd like to test against the current active state.
      li
        strong  current:
        |  A reference to the state's config object. However you passed it in. Useful for accessing custom data.
      li
        strong  transition:
        |  Currently pending transition. A promise that'll resolve or reject.

  section
    h2 Transitions

  section
    p UI-Router has a low-level method for transitioning to a new state,
      strong  transitionTo().
    ul
      li
        strong  $state.go
        |  uses
        strong  transitionTo()
        |  internally.
      li
        strong  $state.go
        |  is recommended in most situations.

  section
    p
      strong  $state.go
      |  or
      strong  $state.transitionTo
      |  take 3 parameters:
    ul
      li
        strong  to:
        |  The name of the state to transition to.
      li
        strong  toParams:
        |  An optional object used to populate the $stateParams.
      li
        strong  options:
        |  An optional object used to configure the state transition.

  section
    h3 Transition Options
    ul
      li
        strong  location:
        |  {boolean=true|string=}
        ul
          li If the value is true, it will update the URL in the location bar.
          li If the value is a string, it must be "replace", which will update the URL and also replace the last history record.
      li
        strong  inherit:
        |  {boolean=false}
        ul
          li If the value is true, it will inherit the URL parameters from the current URL.

  section
    h3 Transition Options - cont.
    ul
      li
        strong  relative:
        |  {object=}
        ul
          li When transitioning with a relative path (e.g., '^'), this defines which state to be relative from.
      li
        strong  notify:
        |  {boolean=true}
        ul
          li If the value is true, this will broadcast
            strong  $stateChangeStart
            |  and
            strong  $stateChangeSuccess
            |  events.
      li
        strong  reload:
        |  {boolean=false}
        ul
          li If the value is true, this will force a transition, even if the state or params have not changed.

  section
    p Let's look at an example of a state transition with params and options:
    br
    pre.
      <code class="js" data-trim>
      $state.go('employees.detail', {id: 1}, {reload: true});
      </code>

  section
    h2 Documentation

  section
    p Angular UI Router provides more functionality than mentioned in this lecture.

  section
    p.
      We recommend that as you go through this labs, you utilize the
      <a href="http://angular-ui.github.io/ui-router/site/#/api/ui.router">AngularUI Router documentation</a>.

  section
    h1 Unit Testing
    h2 Continued

  section
    p Now that we've added AngularUI Router to our application, we need to make sure that we can test state transitions.

  section
    p Instead of injecting the router, we can test everything we need to by simply stubbing out the
      strong  $state
      |  service.

  section
    p First, we'll stub the
      strong  $state
      |  service during our test initialization and save it.
    br
    pre.
      <code class="js" data-trim>
      spies = {
        state: sinon.stub($state)
      };

      </code>

  section
    p Now, when we instantiate our controller for testing, we'll make sure that we inject our stub in the
      strong  $state
      |  service.
    br
    pre.
      <code class="js" data-trim>
      beforeEach(function() {
        $scope = $rootScope.$new();
        controller = $controller("MyCtrl", {
          $scope: $scope,
          $state: spies.state,
        });
      });

      </code>

  section
    p Then we can verify state transitions by checking that the stub was called with our expected parameters
    br
    pre.
      <code class="js" data-trim>
      describe('MyCtrl', function () {
        it('should transition to another state', function () {
          $scope.goToAnotherState();
          expect(spies.state.go).to.have.been.calledWith('app.another.state');
        });
      });

      </code>

  section
    h1 Lab Five
    h2 UI Router
