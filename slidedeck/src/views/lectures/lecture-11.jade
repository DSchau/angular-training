doctype html
include ../includes/mixins

+page("Lecture 11 - E2E Testing with Protractor")
  +lecture-title-page("E2E Testing with Protractor", "Lecture 11")

  section
    h1 Lab Ten
    h2 Solution

  section
    h1 E2E Testing

  section
    h2 What is E2E?

  section
    p E2E stands for
      strong  End-to-End

  section
    p
      strong  E2E testing
      |  is a methodology used to test whether the flow of an application is performing as designed from start to finish.

  section
    p E2E tests validate the functionality of the application as a whole instead of the individual parts and pieces (unit testing).

  section
    p In web applications, E2E testing typically automates the actions of an end user.

  section
    p The preferred tool used to accomplish this testing in AngularJS applications is
      strong  Protractor.

  section
    h1 Protractor

  section
    p What is Protractor?

  section
    p
      strong  Protractor
      |  is an end-to-end test framework for AngularJS applications thats built on top of
      strong  WebDriverJS.

  section
    p
      strong  WebDriverJS
      |  is just a JavaScript API for
      strong  Selenium.

  section
    p What is Selenium?

  section
    p
      strong  Selenium
      |  is a tool that automates browsers; it runs as an independent server.

  section
    p Think of Selenium as an automated end user.

  section
    p We use WebDriverJS to send instructions to a Selenium server running in the background.

  section
    img.no-style(src="/angular-training/assets/img/lecture-11/protractor-flow.png")

  section
    h2 ChromeDriver
    p In this lab we're going to use
      strong  ChromeDriver
      | , which allows us to bypass a Selenium installation and "drive" Chrome directly.

  section
    h1 Writing E2E Tests

  section
    p Protractor and WebDriverJS expose global APIs that you can use to automate actions that a user would perform.

  section
    p One important thing to note about Protractor tests is that, unlike Karma tests that run in the browser, Protractor tests run in Node.js and "drive" a browser.

  section
    h2 E2E Test Syntax

  section
    p Protractor uses the Jasmine test framework by default, so you can use the
      strong  describe
      |  and
      strong  it
      |  structure, just like in Karma tests.

  section
    p The
      strong  browser
      |  global variable is a wrapper around an instance of WebDriver.
    p You can use this for navigation and page-wide information.

  section
    p The
      strong  element
      |  global variable contains a helper function for finding and interacting with elements on the page you are testing.

  section
    p The
      strong  by
      |  global variable contains a collection of element locator strategies.
    p For example, elements can be found by CSS selector, by ID, or by the attribute they are bound to with
      strong  ng-model.

  section
    p These locator strategies are Angular-aware.
    p You can use them to find and interact with elements.
    ul
      li
        strong by.repeater
      li
        strong by.model
      li
        strong by.binding

  section
    p
      strong  protractor
      |  is the protractor namespace which wraps the webdriver namespace.
    p This contains static variables and classes, such as
      strong  protractor.Key
      | , which enumerates the codes for special keyboard signals.

  section
    p We can use these functions to automate the end user and test that the page behaves in the way we expect.
    br
    pre.
      <code data-trim>
      describe('Employees', function () {

        beforeEach (function () {
          browser.get('#/app/employees');
        });

        describe("clicking new employee", function () {
          it('takes us to the create employee form', function () {
            element(by.buttonText("New Employee")).click();
            expect(element(by.binding('$state.current.data.section')).getText()).toBe("Create Employee");
          });
        });

      });

      </code>

  section
    h2 Page Objects

  section
    p When writing real tests scripts for your page, it's best to use the
      strong  Page Objects
      |  pattern to make your tests more readable.

  section
    h2 Page Objects

  section
    p What are Page Objects?
    br
    ul
      li
        strong  Page Objects
        |  are models of the UI you are testing.
      li They reduce the amount of duplications in our tests required to interact with the user interface.
      li Page Objects "face" in both directions.  You can use them to set or get things like field values.

  section
    p Facing "toward" the developer of a test, they represent the services offered by a particular page.

  section
    p Facing "away" from the developer, they should be the only thing that has a deep knowledge of the structure of the HTML of a page (or part of a page).

  section
    p It's simplest to think of the methods on a Page Object as offering the "services" that a page offers rather than exposing the details and mechanics of the page.

  section
    p Here we're creating a page object that models part of the employees list page.
    br
    pre.
      <code data-trim>
      function EmployeesIndexPage() {
        this.get = function () {
          browser.get('#/app/employees');
        };

        this.newEmployeeButton = element(
          by.buttonText("New Employee")
        );

        // Here, we're finding an element by its repeater configuration
        this.firstEmployee = element(
          by.repeater('employee in pageConfig.data').row(0)
        );
      }

      module.exports = new EmployeesIndexPage();

      </code>

  section
    p To start using a page object, just require it.
    br
    pre.
      <code data-trim>
      describe('Employees', function () {

        var indexPage = require('./index.page.js');

      });

      </code>

  section
    p Then, we'll use a
      strong  beforeEach
      |  to make sure that each of our specs start at the employee index page.
    br
    pre.
      <code data-trim>
      describe('Employees', function () {

        var indexPage = require('./index.page.js');

        beforeEach (function () {
          indexPage.get();
        });

      });

      </code>

  section
    p Finally, we'll use the page object to perform actions and expect results.
    br
    pre.
      <code data-trim>
      describe('Employees', function () {

        var indexPage = require('./index.page.js'),
          formPage = require('./form.page.js');

        beforeEach (function () {
          indexPage.get();
        });

        describe("clicking new employee", function () {
          it('takes us to the create employee form', function () {
            indexPage.clickNewEmployee();
            expect(formPage.getPageTitle()).toBe("Create Employee");
          });
        });

      });

      </code>

  section
    p Yes, it's that easy.
    img.no-style(style="width: 100%; height: 100%;",
      src="/angular-training/assets/img/lecture-11/mind-blown.gif")

  section
    h3 Things to consider

  section
    p You should write tests that address the behavior of your application and not the framework (donâ€™t test data binding).

  section
    p Each test block should test as little as possible.

  section
    h1 Lab Eleven
    h2 Protractor

  section
    p In this lab, you'll set up Protractor and create some E2E tests.
